#! /usr/bin/env python
import oerplib
from vauxootools.vauxootools import VauxooToolsServers
from vauxootools.vauxootools import VxConfigServers
from vauxootools.instance import Instance
import getpass


class CreateInstance(object):

    def get_body_html(self, cfdi_info, cfdi_server, db_name):
        '''
        Create the body of mail messages that will be send when the proccess is
        finished
        @param cfdi_info: Dictionary with all information about users leads
        @param cfdi_server: Oerplib object with the new instance created
        @param db_name: String with database name
        '''
        base_url = cfdi_server.execute('ir.config_parameter',
                                       'get_param', 'web.base.url',
                                       '')
            #src=https://docs.google.com/uc?id=0B4yfJJJSNrfuYmFjYTMyMzEtYmVhMS00YjA3LTkzNWQtMDIwMzcxZDllMzI5
        body = """
            <img                                                           
             src="https://drive.google.com/uc?export=download&id=0B2kzKLGF6ZvLanhSeW80QVZVSzg" 
            style="width:110px; padding: 2px 2px 2px;"/>                         
            <div width="100px">                                                    
                <div>                                                              
                </div>                                                             
                <div>                                                              
                    <p>Hi %s</p>                                                   
                </div>                                                             
                <div>                                                              
                    <p>Welcome to OpenCFDI and thanks for choose us</p>            
                </div>                                                             
                <hr width="700" align="left">                                     
                <div>                                                                                                                                          
                    <h3>Sign in to your account</h3>                               
                    <a href="%s/?db=%s">%s/?db=%s</a>               
                </div>                                                             
                <div>                                                              
                    <h3>Username</h3>                                              
                    <a href="%s">%s</a>                                            
                </div>                                                             
            </div>                                                                 
        """ % (cfdi_info.get('name'), base_url, db_name, base_url,
               db_name, cfdi_info.get('email_from'), cfdi_info.get('email_from'))
        return body

    def main(self, host1, host2, ids, logger):
        
        module_list = ['l10n_mx_facturae_pac_finkok', 'portal_crm_vauxoo',
                       'web_bootstrap3', 'l10n_mx_cfdi_register',
                       'web_login_page_cfdi', 'auth_crypt', 'opencfdi_basic']

        lead_server = host1.server_login(host=host1.hostname,
                                         user=host1.username,
                                         password=host1.password,
                                         database=host1.dbname,
                                         port=host1.port)

        cfdi_server = test_server(host2.hostname, host2.port)
        if lead_server and cfdi_server:
            for lead in host1.check_ids(ids, lead_server, 'crm.lead'):
                lead_brw = lead_server.browse('crm.lead', lead)
                if lead_brw.instance_created:
                    break
                cfdi_info = eval(lead_brw.cfdi_info)
                db_name = 'cfdi_%s' % \
                    cfdi_info.get('name', '').lower().replace(' ', '')
                login = host2.create_database(cfdi_server,
                                              host2.sadminpwd,
                                              db_name)
                login = login and login[0]
                if not login:
                    break
                try:
                    cfdi_server.login(user=login.get('login'),
                                      passwd=login.get('password'),
                                      database=db_name)
                except Exception, error:
                    logger.logger.error(error)
                    break


                host2.install_modules(cfdi_server, module_list)
                try:
                    user = host2.username 
                    passwd = host2.password 
                    cfdi_server.login(user=user, passwd=passwd,
                                      database=db_name)
                except Exception, error:
                    logger.error(error)
                    break

                user_ids = cfdi_server.search('res.users',
                                              [('login', '=', 'admin_cfdi')])
                user_ids and \
                    cfdi_server.write('res.users', user_ids,
                                      {
                                          'password': cfdi_info.get('passwd'),
                                          'name': cfdi_info.get('name'),
                                          'login': cfdi_info.get('email_from'),
                                      })
                partner_id = cfdi_server.user.company_id.partner_id
                company_id = cfdi_server.user.company_id
                cfdi_info.pop('user_id')
                partner_id and cfdi_server.write('res.partner',
                                                 [partner_id.id], cfdi_info)
                company_id and \
                    cfdi_server.write('res.company',
                                      [company_id.id],
                                      {
                                          'name':
                                          cfdi_info.get('partner_name'),
                                          'vat': cfdi_info.get('vat'),
                                      })
                body = self.get_body_html(cfdi_info, cfdi_server, db_name)
                id = lead_server.create('mail.mail',
                                        {'email_from':'jose@vauxoo.com',
                                         'email_to':'jose@vauxoo.com',
                                         'subject':'Welcome to OpenCFDI',
                                         'body_html':body})
                lead_server.execute('mail.mail', 'send', [id])
        return True


def test_server(host, port):
    oerp = oerplib.OERP(host, protocol='xmlrpc', port=port)
    oerp.db.list()
    # TODO: Log correctly the failure, now the algorithm to parse the logfile
    # need to be done separately due to the fail moment
    return oerp

if __name__ == '__main__':

    configuration = VauxooToolsServers(app_name='openerp_cfdi_instances',
                                       usage_message="Created by VauxooTools",
                                       options=['dbname', 'hostname', 'il',
                                                'password', 'port', 'sd',
                                                'sh', 'spo', 'sp', 'su',
                                                'username', 'sadminpwd'],
                                       log=True, vx_instance=VxConfigServers)

    hostname = configuration.get_hostname()
    dbname = configuration.get_db()
    port = configuration.get_port()
    user = configuration.get_user()
    pwd = configuration.get_pwd()
    shost = configuration.get_shostname()
    sdb = configuration.get_sdb()
    sport = configuration.get_sport()
    suser = configuration.get_suser()
    spwd = configuration.get_spwd()
    sadminpwd = configuration.get_sadminpwd()
    lead_ids = configuration.get_records()
    test = test1 = True
    try:
        test = test_server(hostname, port)
    except:
        test = False
        configuration.logger.error(
            "We can't connect to the server: http://%s:%s" % (hostname, port))
    try:
        test1 = test_server(shost, sport)
    except:
        test1 = False
        configuration.logger.error(
            "We can't connect to the server: http://%s:%s" % (shost, sport))
    if not test or not test1:
        configuration.logger.error("Please review again the sent parameters ")
    else:
        host1 = Instance(dbname=dbname, hostname=hostname, port=port,
                         passwd=pwd, username=user,
                         logger=configuration.logger)
        host2 = Instance(dbname=sdb, hostname=shost, port=sport,
                         passwd=spwd, username=suser, sadminpwd=sadminpwd,
                         logger=configuration.logger)
        ci = CreateInstance()
        ci.main(host1, host2, lead_ids, configuration.logger)
