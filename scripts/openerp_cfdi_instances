#! /usr/bin/env python
import oerplib
import logging
from vauxootools.vauxootools import VauxooTools
from configglue import glue, schema, app, parser
from vauxootools.vauxootools import VxConfig
from optparse import OptionParser
import getpass

class VxConfig_servers(VxConfig):
    '''
    This class is to instanciate the `configglue`_ options to manage the
    configuration file and optparsers toghether. You will be able to load the
    configuration option from the command line and some of this 3 paths.::

        /etc/xdg/vauxootools/vauxootools.cfg
        /home/<user>/.config/vauxootools/vauxootools.cfg
        ./local.cfg

    The objective of this class is give a generic way to create all the config
    options you need almost always to interact openerp with.

    So as this is a normal python class you can always inherit it from your own
    script/tool and extend what you need.

    See vauxootools --help to read the configuration options available, you can
    create this files as any normal text file with the ini syntax.

    You can see below some options.

    .. _configglue: http://pythonhosted.org/configglue/
    '''

    sh = schema.StringOption(short_name='-sh', default='localhost',
            help='Hostname of your secondary OpenERP server.')
    sd = schema.StringOption(short_name='-sd', default='development',
            help='Secondary data base name where your secondary OpenERP has the information you need.')
    su = schema.StringOption(short_name='-su', default='demo',
            help='Secondary user name to connect to the database')
    sp = schema.StringOption(short_name='-sp', default='demo',
            help='Password of the secondary username provided.')
    spo = schema.IntOption(short_name='-spo', default=8069,
            help='Secondary port where your secondary openerp is serving the web-service.')
    il = schema.ListOption(short_name='-il', default=[0], remove_duplicates=True,
            help='List of id or ids separate by comma without spaces of the leads that generated the task of '
            'create the instance to extract data of it')


class VauxooTools_servers(VauxooTools):
    '''
    Vauxoo tools is the base class to manage the common features necesary to
    work with this library.
    '''
    def __init__(self, app_name='Vauxoo Tools', usage_message='Generated by VauxooTools',
                 options=None, log=False, vx_instance=VxConfig_servers):
        super(VauxooTools_servers,self).__init__(app_name=app_name, usage_message=usage_message,
                 options=options, log=log, vx_instance=vx_instance)

    def get_shostname(self):
        '''Helper to get the normal parameters with less code, in this case
        openerp hostname.

        >>> configuration = VauxooTools(app_name='TestApi',
                                        options=['sh', 'sp'])
        >>> result = configuration.get_shostname()
        >>> print result
        localhost
        '''
        return self.params.get('sh')

    def get_sport(self):
        '''openerp hostname what we will connect to.

        >>> configuration = VauxooTools(app_name='TestApi',
                                        options=['sh', 'sp'])
        >>> result = configuration.get_sport()
        >>> print result
        8069
        '''
        return self.params.get('spo')

    def get_sdb(self):
        '''openerp data base what we will conect to.

        >>> configuration = VauxooTools(app_name='TestApi', options=['hostname', 'sd'])
        >>> result = configuration.get_sdb()
        >>> print result
        development
        '''
        return self.params.get('sd')

    def get_suser(self):
        '''openerp data base what we will conect to.

        >>> configuration = VauxooTools(app_name='TestApi',
                                        options=['su', 'sp'])
        >>> result = configuration.get_suser()
        >>> print result
        demo
        '''
        return self.params.get('su')

    def get_spwd(self):
        '''openerp data base what we will conect to.

        >>> configuration = VauxooTools(app_name='TestApi',
                                        options=['su', 'sp'])
        >>> result = configuration.get_spwd()
        >>> print result
        demo
        '''
        return self.params.get('sp')

    def get_leads(self):
        '''openerp data base what we will conect to.

        >>> configuration = VauxooTools(app_name='TestApi',
                                        options=['il'])
        >>> result = configuration.get_leads()
        >>> print result
        [0]
        '''
        return self.params.get('il')

class Create_Instance(object):

    def __init__(self, dbname, hostname, port, username, sd, sh, spo, su, il):
        self.dbname = dbname
        self.hostname = hostname
        self.password = getpass.getpass('Insert the password for user %s: ' % username)
        self.sp = getpass.getpass('Insert the admin password for server %s: ' % hostname)
        self.il = il
        self.port = port
        self.sd = sd
        self.sh = sh
        self.spo = spo
        self.su = su
        self.username = username

    def server_login(self, host, user, password, database, port):
        '''
        Create an oerplib obejct logged with logged with parameters obtained for this methos
        @param host: String with the server location
        @param user: String with the user login 
        @param password: String with the password for the sent user
        @param database: String with database name to get or set new records
        @param port: Integer with port to which the server works

        return a oerplib login object or False if any parameter is wrong
        '''
        
        con = oerplib.OERP(
        server=host, 
        database=database, 
        port=int(port), 
        )  
        try: 
            con.login(user, password)
            configuration.logger.info("Logged with user %s" % (user))
        except Exception, e:
            con = False
            configuration.logger.error("We can't do login in the iserver: "
                                       "http://%s:%s with user %s" % (hostname, port, user))
            configuration.logger.error(e)
        return con
    
    def create_database(self, con, admin_pass, db_name, db_password):
        '''
        Creates a new databae to install modules for create a cfdi_instance
        @param con: Oerplib object with server conection
        @param admin_pass: String with te super admin password to create database
        @param db_name: String with name to the new database
        @param db_password: String with the admin password to the new database
        return False o a dict with login information
        '''
        login = False
        try:
            if not db_name in con.db.list():
                configuration.logger.info("Creating db %s" % db_name)
                login = con.db.create_and_wait(admin_pass, db_name, admin_passwd='1234')
            else:
                configuration.logger.error("We can't create the database %s because there is a "
                                           "database with the same name" % db_name)

        except Exception, e:
            configuration.logger.error("We can't create the database %s" % db_name)
            configuration.logger.error(e)
            
        return login
        
    def prepare_lead_ids(self, leads, server):
        '''
        Verifies the lead ids to be sure than all are valid ids
        @param leads: List with possible lead ids 
        @param server: Oerplib object with server to check if the lead exist
        return List with ids
        '''
        for i in leads:
            if str(i).isdigit():
                if server.execute('crm.lead', 'exists', int(i)):
                    yield(int(i))
                else:
                    configuration.logger.warning("The lead %s don't exist" % i)

    def install_modules(self, server, modules):
        '''
        Install modules sent
        @param server: Oerplib object of cfdi instance
        @param modules: List with modules name that will be install
        '''
        for module in modules:
            ids = server.search('ir.module.module', [('name', '=', module)])
            if ids:
                configuration.logger.info("Installing module %s" % module)
                server.execute('ir.module.module', 'button_immediate_install', ids)
            else:
                configuration.logger.warnning("The module %s is not avaliable in the "
                                              "server" % module)

    def main(self):
        module_list = ['l10n_mx_facturae_pac_finkok', 'l10n_mx_cfdi_register', 'auth_crypt', 
                       'opencfdi_base']

        lead_server = self.server_login(self.hostname, self.username, self.password, self.dbname,
                                        self.port)
        cfdi_server = test_server(self.sh, self.spo)
        if lead_server and cfdi_server:
            for lead in self.prepare_lead_ids(self.il, lead_server):
                lead_brw = lead_server.browse('crm.lead', lead)
                if lead_brw.instance_created:
                    break
                cfdi_info = eval(lead_brw.cfdi_info)
                db_name = 'cfdi_%s' % cfdi_info.get('name', '').lower().replace(' ', '')
                login = self.create_database(cfdi_server, self.sp, db_name, '1234')
                login = login and login[0]
                if not login:
                    break
                try:
                    cfdi_server.login(user=login.get('login'), passwd=login.get('password'),
                                      database=db_name)
                except Exception, e:
                    configuration.logger.error(e)
                    break

                self.install_modules(cfdi_server, module_list)
                try:
                    user = getpass.getpass('Insert admin user to the new instance: ')
                    passwd = getpass.getpass('Insert the admin password to the new instance: ')
                    cfdi_server.login(user=user, passwd=passwd, database=db_name)
                except Exception, e:
                    configuration.logger.error(e)
                    break

                user_ids = cfdi_server.search('res.users', [('login', '=', 'admin_cfdi')])
                user_ids and cfdi_server.write('res.users', user_ids,
                                               {
                                               'password':cfdi_info.get('passwd'),
                                               'name':cfdi_info.get('name'),
                                               'login':cfdi_info.get('email_from'),
                                                })
                partner_id = cfdi_server.user.company_id.partner_id
                company_id = cfdi_server.user.company_id
                cfdi_info.pop('user_id')
                partner_id and cfdi_server.write('res.partner', [partner_id.id], cfdi_info)
                company_id and cfdi_server.write('res.company', [company_id.id], 
                                                {
                                                    'name':cfdi_info.get('partner_name'),
                                                    'vat':cfdi_info.get('vat'),
                                                    })
                
        return True
        

def test_server(host, port):
    oerp = oerplib.OERP(host, protocol='xmlrpc', port=port)
    oerp.db.list()
    #TODO: Log correctly the failure, now the algorithm to parse the logfile
    #need to be done separately due to the fail moment
    return oerp

if __name__ == '__main__':

    configuration = VauxooTools_servers(app_name='openrp_cfdi_intances',
                                        usage_message="Generated by VauxooTools",
                                        options=['dbname', 'hostname', 'il', 'password', 'port',
                                                 'sd', 'sh', 'spo', 'sp', 'su', 'username'],
                                        log=True, vx_instance=VxConfig_servers)

    _logger = logging.getLogger('openerp_cfdi')
    hostname = configuration.get_hostname()
    dbname = configuration.get_db()
    port = configuration.get_port()
    user = configuration.get_user()
    pwd = configuration.get_pwd()
    shost = configuration.get_shostname()
    sdb = configuration.get_sdb()
    sport = configuration.get_sport()
    suser = configuration.get_suser()
    spwd = configuration.get_spwd()
    lead_ids = configuration.get_leads()
    test = test1 = True
    try:
        test = test_server(hostname, port)
    except:
        test = False 
        configuration.logger.error("We can't connect to the server: http://%s:%s" % (hostname, port))
    try:
        test1 = test_server(shost, sport)
    except:
        test1 = False 
        configuration.logger.error("We can't connect to the server: http://%s:%s" % (shost, sport))
    if not test or not test1:
        configuration.logger.error("Please review again the parameters sent")
    else:
        ci = Create_Instance(dbname, hostname, port, user, sdb, shost, sport, suser, lead_ids)
        ci.main()
        
