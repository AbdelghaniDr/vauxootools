#! /usr/bin/env python
import oerplib
from vauxootools.vauxootools import VauxooToolsServers
from vauxootools.vauxootools import VxConfigServers
from vauxootools.instance import Instance
from vauxootools.serverenv import ServerEnviroment
import os
import getpass
import time


class CreateInstance(object):

    def get_body_html(self, cfdi_info, cfdi_server, db_name):
        '''
        Create the body of mail messages that will be send when the proccess is
        finished
        @param cfdi_info: Dictionary with all information about users leads
        @param cfdi_server: Oerplib object with the new instance created
        @param db_name: String with database name
        '''
        base_url = '%s.%s' % (db_name, cfdi_server)
        
        
        # base_url = cfdi_server.execute('ir.config_parameter',
       #                                'get_param', 'web.base.url',
       #                                '')
            #src=https://docs.google.com/uc?id=0B4yfJJJSNrfuYmFjYTMyMzEtYmVhMS00YjA3LTkzNWQtMDIwMzcxZDllMzI5
        body = """
<div>                                                                              
      <p style="line-height:20px;font-size:15px;margin:6px 0 9px;font-family:&quot;Helvetica Neue&quot;,helvetica,arial,sans-serif">
          <img alt="Logo email" src="http://www.cfdi.org/website_crm_opencfdi/static/src/img/opencfdi.png" style="width:150px">
      </p>
    <br>
        <p style="line-height:20px;font-size:15px;margin:6px 0 9px;font-family:&quot;Helvetica Neue&quot;,helvetica,arial,sans-serif">Hola %s,</p>
        <p style="line-height:20px;font-size:15px;margin:6px 0
        9px;font-family:&quot;Helvetica
        Neue&quot;,helvetica,arial,sans-serif">Bienvenido a <span class="il">OpenCFDI</span>!
        </p>
                                                                                   
    <div style="margin:19px 0;padding:15px 0;border-top:1px solid #ccc;border-bottom:1px solid #ccc;background:#ffffff">
        <p style="line-height:20px;font-size:15px;margin:6px 0 9px;font-family:&quot;Helvetica Neue&quot;,helvetica,arial,sans-serif">
            <b>Inicia sesion con tu cuenta:</b>
            <br>
                <a href="%s" target="_blank"><span class="il">%s</span>/login
                </a>
        </p>                                                                       
                                                                                   
    <p style="line-height:20px;font-size:15px;margin:6px 0 9px;font-family:&quot;Helvetica Neue&quot;,helvetica,arial,sans-serif">
          <b>Nombre de Usuario:</b><br>                                                     
          <a href="%s" target="_blank">%s</a>  
        </p>                                                                       
      </div>
      <p style="line-height:20px;font-size:15px;margin:6px 0
      9px;font-family:&quot;Helvetica
      Neue&quot;,helvetica,arial,sans-serif">Esperamos que disfrutes esta oportunidad al usar <span class="il">OpenCFDI</span>.
      </p>
      <p style="line-height:20px;font-size:15px;margin:6px 0 9px;font-family:&quot;Helvetica Neue&quot;,helvetica,arial,sans-serif">
        <a href="www.cfdi.org" target="_blank">Ayudanos a mejorar <span class="il">OpenCFDI</span> comentanos un poco mas acerca de tu empresa 
        </a>
      </p>
</div>  
        """ % (cfdi_info.get('name'), base_url, base_url,
               cfdi_info.get('email_from'), cfdi_info.get('email_from'))

        return body

    def create_server_instance(self, lead_server, cfdi_server, cfdi_info,
                               host2, db_name, logger, domain=None):
        domain = domain or 'cfdi.pruba.jose.com' 
        module_list = ['l10n_mx_facturae_pac_finkok', 'portal_crm_vauxoo',
                       'web_bootstrap3', 'l10n_mx_cfdi_register',
                       'web_login_page_cfdi', 'auth_crypt', 'opencfdi_basic']


        if lead_server and cfdi_server:
                try:
                    cfdi_server.login(user='admin',
                                      passwd='admin',
                                      database=db_name)
                except Exception, error:
                    logger.logger.error(error)
                    return True


                host2.install_modules(cfdi_server, module_list)
                try:
                    user = host2.username 
                    passwd = host2.password 
                    cfdi_server.login(user=user, passwd=passwd,
                                      database=db_name)
                except Exception, error:
                    logger.error(error)
                    return True

                user_ids = cfdi_server.search('res.users',
                                              [('login', '=', 'admin_cfdi')])
                user_ids and \
                    cfdi_server.write('res.users', user_ids,
                                      {
                                          'password': cfdi_info.get('passwd'),
                                          'name': cfdi_info.get('name'),
                                          'login': cfdi_info.get('email_from'),
                                      })
                partner_id = cfdi_server.user.company_id.partner_id
                company_id = cfdi_server.user.company_id
                cfdi_info.pop('user_id', 'No')
    #            cfdi_info.pop('vat', 'No')
                partner_id and cfdi_server.write('res.partner',
                                                 [partner_id.id], cfdi_info)
                company_id and \
                    cfdi_server.write('res.company',
                                      [company_id.id],
                                      {
                                          'name':
                                          cfdi_info.get('partner_name'),
                                        #  'vat': cfdi_info.get('vat'),
                                      })

                body = self.get_body_html(cfdi_info, domain, db_name)
                id = lead_server.create('mail.mail',
                                        {'email_from':'jose@vauxoo.com',
                                         'email_to':cfdi_info.get('email_from'),
                                         'subject':'Welcome to OpenCFDI',
                                         'body_html':body})
                lead_server.execute('mail.mail', 'send', [id])
        return True


    def main(self, configuration):
        hostname = configuration.get_hostname()
        dbname = configuration.get_db()
        port = configuration.get_port()
        user = configuration.get_user()
        pwd = configuration.get_pwd()
        shost = configuration.get_shostname()
        sdb = configuration.get_sdb()
        sport = configuration.get_sport()
        suser = configuration.get_suser()
        spwd = configuration.get_spwd()
        sadminpwd = configuration.get_sadminpwd()
        lead_ids = configuration.get_records()
        serverpath = configuration.get_serverpath()
        addonspath = configuration.get_addonspath()
        configpath = configuration.get_configpath()
        test = test1 = True
        try:
            test = test_server(hostname, port)
        except:
            test = False
            configuration.logger.error(
                "We can't connect to the server: http://%s:%s" % (hostname, port))

        host1 = Instance(dbname=dbname, hostname=hostname, port=port,
                         passwd=pwd, username=user,
                         logger=configuration.logger)

        lead_server = host1.server_login(host=host1.hostname,
                                         user=host1.username,
                                         password=host1.password,
                                         database=host1.dbname,
                                         port=host1.port)

        for lead in host1.check_ids(lead_ids, lead_server, 'crm.lead'):
            lead_brw = lead_server.browse('crm.lead', lead)
            if lead_brw.instance_created or not lead_brw.cfdi_info:
                break
            cfdi_info = eval(lead_brw.cfdi_info)
            email = cfdi_info.get('email_from')
            username = email.split('@')
            username = username and username[0]
            db_name = 'cfdi_%s' % \
                cfdi_info.get('name', '').lower().replace(' ', '').\
                                                  replace('.', '')
            enviroment = ServerEnviroment('cfdi', username,
                                          cfdi_info.get('passwd').strip(),
                                          addonspath, configpath, serverpath)
            enviroment.create_postgres_user()
            enviroment.create_linux_user()
            enviroment.create_config_file()
            enviroment.create_database(db_name)
            enviroment.create_nginx_config()
            enviroment.run_server()
            time.sleep(60)
            host2 = Instance(dbname=sdb, hostname=shost, port=enviroment.port,
                             passwd=spwd, username=suser,
                             sadminpwd='admin',
                             logger=configuration.logger)
            cfdi_server = test_server(host2.hostname, enviroment.port)
            self.create_server_instance(lead_server, cfdi_server, cfdi_info,
                                        host2, db_name, configuration.logger)

        if not test:
            configuration.logger.error("Please review again the sent parameters")
        return True

def test_server(host, port):
    oerp = oerplib.OERP(host, port=port)
    # TODO: Log correctly the failure, now the algorithm to parse the logfile
    # need to be done separately due to the fail moment
    return oerp

if __name__ == '__main__':

    configuration = VauxooToolsServers(app_name='openerp_cfdi_instances',
                                       usage_message="Created by VauxooTools",
                                       options=['dbname', 'hostname', 'il',
                                                'password', 'port', 'sd',
                                                'sh', 'spo', 'sp', 'su',
                                                'username', 'sadminpwd',
                                                'configpath', 'serverpath',
                                                'addonspath'],
                                       log=True, vx_instance=VxConfigServers)
    
    CI = CreateInstance()
    CI.main(configuration)

