#! /usr/bin/env python
from vauxootools.vauxootools import VauxooToolsServers
from vauxootools.vauxootools import VxConfigServers
from vauxootools.instance import Instance


class ImportJournalsV6(object):
    '''
    Import journals from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def create_sequence(self):
        '''
        Create the sequence in the destiny instance for the new journal
        '''
        sequence_ids = self.migration.origin.\
                                    search('ir.sequence',
                                           [])
        for sequence in self.migration.origin.execute('ir.sequence',
                                                      'export_data',
                                                      sequence_ids,
                                                      ['id', 'name',
                                                       'prefix',
                                                       'suffix',
                                                       'padding',
                                                       'number_increment'
                                                      ])['datas']:
            result = self.migration.dest.execute('ir.sequence',
                                                 'import_data',
                                                 ['id', 'name',
                                                  'prefix',
                                                  'suffix',
                                                  'padding',
                                                  'number_increment'],
                                                 [sequence])
            if result[2]:
                self.migration.loger.error('Error creating the sequence %s '
                                           'because %s' % (sequence[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the sequence type %s '
                                          '' % (sequence[1]))
        return True


    def create_analytic(self):
        '''
        Import the Analytic Journal by import_data method way
        '''
        analytic_ids = self.migration.origin.\
                                    search('account.analytic.journal',
                                           [])
        for analytic in self.migration.origin.\
                                execute('account.analytic.journal',
                                        'export_data',
                                        analytic_ids,
                                        ['id', 'name',
                                         'code',
                                         'type'])['datas']:
            result = self.migration.dest.execute('account.analytic.journal',
                                                 'import_data',
                                                 ['id', 'name',
                                                  'code',
                                                  'type'],
                                                 [analytic])
            if result[2]:
                self.migration.loger.error('Error creating the analytic %s '
                                           'because %s' % (analytic[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the analytic type %s '
                                          '' % (analytic[1]))
        return True


    def create_journal(self):
        '''
        Create the new journal in the destiny instance
        '''
        journal_ids = self.migration.origin.\
                                    search('account.journal',
                                           [])
        for journal in self.migration.origin.\
                                execute('account.journal',
                                        'export_data',
                                        journal_ids,
                                        ['id', 'name',
                                         'code',
                                         'type',
                                         'analytic_journal_id/id',
                                         'sequence_id',
                                         'default_credit_account_id/id',
                                         'default_debit_account_id/id',
                                        ])['datas']:
            if 'Bank and Cheques' in journal:
                journal.insert(journal.index('Bank and Cheques'),
                               'Bank and Checks')
                journal.remove('Bank and Cheques')
            result = self.migration.dest.\
                            execute('account.journal',
                                    'import_data',
                                    ['id', 'name',
                                     'code',
                                     'type',
                                     'analytic_journal_id/id',
                                     'sequence_id',
                                     'default_credit_account_id/id',
                                     'default_debit_account_id/id'],
                                    [journal])
            if result[2]:
                self.migration.loger.error('Error creating the journal %s '
                                           'because %s' % (journal[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the journal type %s '
                                          '' % (journal[1]))
        return True

    def main(self):
        '''
        Prepare the ids of the new records to create
        '''
        self.create_sequence()
        self.create_analytic()
        self.create_journal()




class ImportProductV6(object):
    '''
    Import Product from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def import_category(self):
        '''
        Import the Product Category by import_data method way
        '''
        category_ids = self.migration.origin.\
                                    search('product.category',
                                           [])
        for category in self.migration.origin.\
                              execute('product.category',
                                      'export_data',
                                      category_ids,
                                      ['id', 'name',
                                       'type',
                                       'parent_id/id',
                                       'property_account_expense_categ/id',
                                       'property_account_income_categ/id',
                                       'property_stock_account_input_categ/id',
                                       'property_stock_account_output_categ/id',
                                       'property_stock_valuation_account_id/id',
                                       'property_stock_journal/id',
                                      ])['datas']:
            result = self.migration.dest.\
                            execute('product.category',
                                    'import_data',
                                    ['id', 'name',
                                     'type',
                                     'parent_id/id',
                                     'property_account_expense_categ/id',
                                     'property_account_income_categ/id',
                                     'property_stock_account_input_categ/id',
                                     'property_stock_account_output_categ/id',
                                     'property_stock_valuation_account_id/id',
                                     'property_stock_journal/id'],
                                             [category])
            if result[2]:
                self.migration.loger.error('Error creating the Category %s '
                                           'because %s' % (category[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the category type %s '
                                          '' % (category[1]))
        return True

    def import_product(self):
        '''
        Import the Product by import_data method way
        '''
        product_ids = self.migration.origin.\
                                    search('product.product',
                                           [])
        for product in self.migration.origin.\
                              execute('product.product',
                                      'export_data',
                                      product_ids,
                                      ['id', 'name',
                                       'type',
                                       'default_code',
                                       'list_price',
                                       'standard_price',
                                       'active',
                                       'warranty',
                                       'description_sale',
                                       'categ_id/id'])['datas']:
            result = self.migration.dest.\
                            execute('product.product',
                                    'import_data',
                                    ['id', 'name',
                                     'type',
                                     'default_code',
                                     'list_price',
                                     'standard_price',
                                     'active',
                                     'warranty',
                                     'description_sale',
                                     'categ_id/id'],
                                             [product])
            if result[2]:
                self.migration.loger.error('Error creating the product %s '
                                           'because %s' % (product[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the product type %s '
                                          '' % (product[1]))
        return True

    def main(self):
        self.import_category()
        self.import_product()

class ImportListPriceV6(object):
    '''
    Import List Price from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def import_price_list(self):
        '''
        Import the price_list by import_data method way
        '''
        pricelist_ids = self.migration.origin.\
                                    search('product.pricelist',
                                           [])
        for pricelist in self.migration.origin.execute('product.pricelist',
                                                       'export_data',
                                                       pricelist_ids,
                                                       ['id', 'name',
                                                        'type'])['datas']:
            result = self.migration.dest.execute('product.pricelist',
                                                 'import_data',
                                                 ['id', 'name',
                                                  'type'],
                                                 [pricelist])
            if result[2]:
                self.migration.loger.error('Error creating the type %s '
                                           'because %s' % (pricelist[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the pricelist type %s '
                                          '' % (pricelist[1]))
        return True

    def import_price_list_version(self):
        '''
        Import the price_list_version by import_data method way
        '''
        pricelist_ids = self.migration.origin.\
                                    search('product.pricelist.version',
                                           [])
        for pricelist in self.migration.origin.\
                                 execute('product.pricelist.version',
                                         'export_data',
                                         pricelist_ids,
                                         ['id', 'name',
                                          'pricelist_id/id',
                                          'date_start',
                                          'date_end'])['datas']:
            result = self.migration.dest.execute('product.pricelist.version',
                                                 'import_data',
                                                 ['id', 'name',
                                                  'pricelist_id/id',
                                                  'date_start',
                                                  'date_end'],
                                                 [pricelist])
            if result[2]:
                self.migration.loger.error('Error creating the type %s '
                                           'because %s' % (pricelist[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the pricelist type %s '
                                          '' % (pricelist[1]))
        return True

    def import_price_list_items(self):
        '''
        Import the price_list_items by import_data method way
        '''
        pricelist_ids = self.migration.origin.\
                                    search('product.pricelist.item',
                                           [])
        for pricelist in self.migration.origin.\
                                execute('product.pricelist.item',
                                        'export_data',
                                        pricelist_ids,
                                        ['id', 'name',
                                         'price_version_id/id',
                                         'base_pricelist_id/id',
                                         'min_quantity',
                                         'base',
                                         'price_discount',
                                         'price_max_margin',
                                         'price_min_margin',
                                         'price_round',
                                         'sequence',
                                        ])['datas']:
            result = self.migration.dest.execute('product.pricelist.item',
                                                 'import_data',
                                                 ['id', 'name',
                                                  'price_version_id/id',
                                                  'base_pricelist_id/id',
                                                  'min_quantity',
                                                  'base',
                                                  'price_discount',
                                                  'price_max_margin',
                                                  'price_min_margin',
                                                  'price_round',
                                                  'sequence'],
                                                 [pricelist])
            if result[2]:
                self.migration.loger.error('Error creating the type %s '
                                           'because %s' % (pricelist[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the pricelist type %s '
                                          '' % (pricelist[1]))
        return True

    def main(self):
        '''
        Create Journals and all record related with the journals
        '''
        self.import_price_list()
        self.import_price_list_version()
        self.import_price_list_items()

class ImportAccountsV6(object):
    '''
    Import list from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def import_account_type(self):
        '''
        Import the account type by import_data method way
        '''
        account_ids = self.migration.origin.\
                                    search('account.account.type',
                                           [])
        for account in self.migration.origin.execute('account.account.type',
                                                     'export_data',
                                                     account_ids,
                                                     ['id', 'name',
                                                      'code', 'report_type',
                                                      'close_method']
                                                    )['datas']:
            result = self.migration.dest.execute('account.account.type',
                                                 'import_data',
                                                 ['id', 'name',
                                                  'code', 'report_type',
                                                  'close_method'],
                                                 [account])
            if result[2]:
                self.migration.loger.error('Error creating the type %s '
                                           'because %s' % (account[1],
                                                           result[2]))
            else:
                self.migration.loger.info('Created the account type %s '
                                          '' % (account[1]))
        return True

    def main(self):
        '''
        Search the records to create in the new instance
        '''
        company_ids = self.migration.origin.search('res.company', [])
        company_id = company_ids and company_ids[0]
        company_dest = self.migration.dest.search('res.company',
                                                  [])
        if company_id and company_dest:
            self.import_account_type()
            company_dest = self.migration.dest.browse('res.company',
                                                      company_dest[0])
            account_ids = self.migration.origin.\
                                     search('account.account',
                                            [])
            for account in self.migration.origin.execute('account.account',
                                                         'export_data',
                                                         account_ids,
                                                         ['id', 'name',
                                                          'code',
                                                          'parent_id/id',
                                                          'user_type/id']
                                                        )['datas']:

                result = self.migration.dest.execute('account.account',
                                                     'import_data',
                                                     ['id', 'name',
                                                      'code',
                                                      'parent_id/id',
                                                      'user_type/id'],
                                                     [account])
                if result[2]:
                    self.migration.loger.error('Error creating the account %s '
                                               'because %s' % (account[1],
                                                               result[2]))
                else:
                    self.migration.loger.info('Created the account %s '
                                              '' % (account[1]))



class ImportPartnerV6(object):
    '''
    IMport partners from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def get_account(self, account_brw, company):
        '''
        Get the partner account in destiny instance
        @param acount_brw: Browse object of the account record in origin
                           instance
        @param company: Browse record of the companuy in destiny instance
        return and id of the account found
        '''
        if account_brw:
            account_ids = self.migration.dest.search(
                'account.account', [('name', '=', account_brw.name),
                                    ('code', '=', account_brw.code),
                                    ('company_id', '=', company.id)])
            return account_ids and account_ids[0]

        return False

    def get_address_and_child(self, partner, address, company):
        '''
        Create contact for each partner address
        @param partner: Browse object with the partner in origin instance
        @param address: Browse record list with all res.partner.address
                        records of the partner to create
        @param company: Browse record of the companuy in destiny instance
        '''
        child = []
        partner_dict = {}
        invoice = False
        for i in address:
            if i.type == 'invoice' and not invoice:
                partner_dict.update({
                    'email': i.email,
                    'phone': i.phone,
                    'country_id': company.country_id and company.country_id.id,
                    'street': i.street,
                    'street2': i.street2,
                    'city': i.street2,
                    'mobile': i.mobile,
                    'fax': i.fax,
                    'type': i.type,
                })
                invoice = True

            else:
                child.append((0, 0, {
                    'name': i.name or 'Sin Nombre',
                    'email': i.email,
                    'property_account_payable': \
                             self.get_account(partner.property_account_payable,
                                              company),
                    'property_account_receivable': \
                         self.get_account(partner.property_account_receivable,
                                          company),
                    'phone': i.phone,
                    'country_id': company.country_id and company.country_id.id,
                    'street': i.street,
                    'street2': i.street2,
                    'city': i.street2,
                    'mobile': i.mobile,
                    'fax': i.fax,
                    'type': i.type,
                }))

        partner_dict.update({'child_ids': child})

        return partner_dict

    def create_partner(
            self,
            partner_brw,
            company):
        '''
        Create partner
        @param partner_brw: Browse object with the partner in origin instance
        @param company: Browse record of the companuy in destiny instance
        '''
        partner_id = False
        if partner_brw.vat:
            partner_ids = self.migration.dest.search('res.partner', [
                ('vat', '=', partner_brw.vat),
            ])
            if partner_ids:
                return partner_ids[0]
        partner = {
            'name': partner_brw.name or 'Sin Nombre',
            'vat': partner_brw.vat,
            'customer': partner_brw.customer,
            'is_company': True,
            'supplier': partner_brw.supplier,
            'company_id': company.id,
            'property_account_payable': self.get_account(
                partner_brw.property_account_payable,
                company),
            'property_account_receivable': self.get_account(
                partner_brw.property_account_receivable,
                company)}

        partner.update(
            self.get_address_and_child(
                partner_brw,
                partner_brw.address,
                company))
        partner_ids = self.migration.dest.search(
            'res.partner', [
                ('name', '=', partner_brw.name), ('vat', '=', partner.get(
                    'vat', False))])
        if partner_ids:
            return partner_ids[0]

        self.migration.loger.info('Creating partner %s' % partner_brw.name)
        try:
            partner_id = self.migration.dest.create('res.partner', partner)
        except Exception as problem:
            self.migration.loger.error('Error %s' % problem)
        return partner_id

    def main(self):
        '''
        Search record to create partners
        '''
        company_dest = self.migration.dest.search('res.company', [])
        company_dest = self.migration.dest.browse(
            'res.company',
            company_dest[0])
        partner_ids = self.migration.origin.search('res.partner', [], limit=50)
        for partner in partner_ids:
            partner = self.migration.origin.browse('res.partner', partner)
            self.create_partner(partner, company_dest)


class MigrationTools(object):
    '''
    Conections object to get records to migrate
    '''

    def __init__(self):
        '''
        Objects of origin and destiny
        '''
        self.origin = False
        self.dest = False
        self.loger = False

    def main(self, configuration):
        '''
        Get variables of the configuration object
        '''
        hostname = configuration.get_hostname()
        dbname = configuration.get_db()
        port = configuration.get_port()
        user = configuration.get_user()
        pwd = configuration.get_pwd()
        shost = configuration.get_shostname()
        sdb = configuration.get_sdb()
        sport = configuration.get_sport()
        suser = configuration.get_suser()
        spwd = configuration.get_spwd()
        origin = Instance(dbname=dbname, hostname=hostname, port=int(port),
                          passwd=pwd, username=user,
                          logger=configuration.logger)
        self.origin = origin.server_login()
        dest = Instance(dbname=sdb, hostname=shost, port=int(sport),
                        passwd=spwd, username=suser,
                        logger=configuration.logger)
        self.dest = dest.server_login()
        self.loger = configuration.logger
        return True



if __name__ == '__main__':

    CONFIGURATION = VauxooToolsServers(app_name='migrate_instances',
                                       usage_message="Created by VauxooTools",
                                       options=['dbname', 'hostname',
                                                'password', 'port', 'sd',
                                                'sh', 'spo', 'sp', 'su',
                                                'username'],
                                       log=True, vx_instance=VxConfigServers)

    CI = MigrationTools()
    CI.main(CONFIGURATION)
    obj = ImportAccountsV6(CI)
    obj.main()
    obj = ImportJournalsV6(CI)
    obj.main()
    obj = ImportProductV6(CI)
    obj.main()
    obj = ImportListPriceV6(CI)
    obj.main()
