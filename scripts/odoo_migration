#! /usr/bin/env python
import oerplib
from vauxootools.vauxootools import VauxooToolsServers
from vauxootools.vauxootools import VxConfigServers
from vauxootools.instance import Instance


class ImportAccountsV6(object):
    '''
    Import partners from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def create_user_type(self, a_type):
        '''
        Create accounts type for each account to create
        @param a_type: Browse record with account type in the origin instance
        return id of the acount type found or created
        '''
        type_ids = self.migration.dest.search('account.account.type',
                                              [('code', '=', a_type.code)])
        if type_ids:
            return type_ids[0]
        else:
            types = {
                'name': a_type.name,
                'code': a_type.code,
                'report_type': a_type.report_type,
                'close_method': a_type.close_method}

            type_id = self.migration.dest.create('account.account.type',
                                                 types)

            return type_id

    def get_code(self, code, company):
        '''
        Search the code of a specific account in the destiny instance
        @param code: String with the account code
        @param company: Integer with the company id
        return the unic code for the new account
        '''
        account_ids = self.migration.dest.search('account.account',
                                                 [('code', '=', code),
                                                  ('company_id', '=', company)])
        if account_ids:
            new_code = '%s-%s' %(code, 'R')
            return self.get_code(new_code, company)

        else:
            return code

    def create_account(self, account_brw, company):
        '''
        Create a new account in the destiny instance, all information about
        the new account is extracted from the origin instance
        @param account_brw: Browse object of the account in origin instance
        @param company: Browse object of the company in destiny instance
        '''
        account_ids = self.migration.dest.\
                                search('account.account',
                                       [('name', '=', account_brw.name),
                                        ('code', '=', account_brw.code),
                                        ('company_id', '=', company.id)])
        if account_ids:
            return account_ids[0]
        account = {
            'name': account_brw.name,
            'code': self.get_code(account_brw.code, company.id),
            'parent_id': account_brw.parent_id and \
                            self.create_account(account_brw.parent_id,
                                                company) or False,
            'company_id': company.id,
            'currency_id': company.currency_id and \
                                            company.currency_id.id,
            'user_type': self.create_user_type(account_brw.user_type),

            }

        self.migration.loger.info('Creating acccount %s' % account_brw.name)
        account_id = self.migration.dest.create('account.account', account)
        return account_id

    def main(self):
        '''
        Search the records to create in the new instance
        '''
        company_ids = self.migration.origin.search('res.company', [])
        company_id = company_ids and company_ids[0]
        company_dest = self.migration.dest.search('res.company',
                                                  [])
        if company_id and company_dest:
            company_dest = self.migration.dest.browse('res.company',
                                                      company_dest[0])
            account_ids = self.migration.origin.\
                                     search('account.account',
                                            [('company_id', '=', company_id)])
            for account in self.migration.origin.browse('account.account',
                                                        account_ids):
                self.create_account(account, company_dest)


class ImportPartnerV6(object):
    '''
    IMport partners from verion 6 of odoo
    '''

    def __init__(self, migration):
        '''
        @param migration: Object with origin and destiny conection
        '''
        self.migration = migration

    def get_account(self, account_brw, company):
        '''
        Get the partner account in destiny instance
        @param acount_brw: Browse object of the account record in origin
                           instance
        @param company: Browse record of the companuy in destiny instance
        return and id of the account found
        '''
        if account_brw:
            account_ids = self.migration.dest.search(
                'account.account', [('name', '=', account_brw.name),
                                    ('code', '=', account_brw.code),
                                    ('company_id', '=', company.id)])
            return account_ids and account_ids[0]

        return False

    def get_address_and_child(self, partner, address, company):
        '''
        Create contact for each partner address
        @param partner: Browse object with the partner in origin instance
        @param address: Browse record list with all res.partner.address
                        records of the partner to create
        @param company: Browse record of the companuy in destiny instance
        '''
        child = []
        partner_dict = {}
        invoice = False
        for i in address:
            if i.type == 'invoice' and not invoice:
                partner_dict.update({
                    'email': i.email,
                    'phone': i.phone,
                    'country_id': company.country_id and company.country_id.id,
                    'street': i.street,
                    'street2': i.street2,
                    'city': i.street2,
                    'mobile': i.mobile,
                    'fax': i.fax,
                    'type': i.type,
                })
                invoice = True

            else:
                child.append((0, 0, {
                    'name': i.name or 'Sin Nombre',
                    'email': i.email,
                    'property_account_payable': \
                             self.get_account(partner.property_account_payable,
                                              company),
                    'property_account_receivable': \
                         self.get_account(partner.property_account_receivable,
                                          company),
                    'phone': i.phone,
                    'country_id': company.country_id and company.country_id.id,
                    'street': i.street,
                    'street2': i.street2,
                    'city': i.street2,
                    'mobile': i.mobile,
                    'fax': i.fax,
                    'type': i.type,
                }))

        partner_dict.update({'child_ids': child})

        return partner_dict

    def create_partner(
            self,
            partner_brw,
            company):
        '''
        Create partner
        @param partner_brw: Browse object with the partner in origin instance
        @param company: Browse record of the companuy in destiny instance
        '''
        partner_id = False
        if partner_brw.vat:
            partner_ids = self.migration.dest.search('res.partner', [
                ('vat', '=', partner_brw.vat),
            ])
            if partner_ids:
                return partner_ids[0]
        partner = {
            'name': partner_brw.name or 'Sin Nombre',
            'vat': partner_brw.vat,
            'customer': partner_brw.customer,
            'is_company': True,
            'supplier': partner_brw.supplier,
            'company_id': company.id,
            'property_account_payable': self.get_account(
                partner_brw.property_account_payable,
                company),
            'property_account_receivable': self.get_account(
                partner_brw.property_account_receivable,
                company)}

        partner.update(
            self.get_address_and_child(
                partner_brw,
                partner_brw.address,
                company))
        partner_ids = self.migration.dest.search(
            'res.partner', [
                ('name', '=', partner_brw.name), ('vat', '=', partner.get(
                    'vat', False))])
        if partner_ids:
            return partner_ids[0]

        self.migration.loger.info('Creating partner %s' % partner_brw.name)
        try:
            partner_id = self.migration.dest.create('res.partner', partner)
        except Exception as e:
            self.migration.loger.error('Error %s' % e)
        return partner_id

    def main(self):
        '''
        Search record to create partners
        '''
        company_dest = self.migration.dest.search('res.company', [])
        company_dest = self.migration.dest.browse(
            'res.company',
            company_dest[0])
        partner_ids = self.migration.origin.search('res.partner', [], limit=50)
        for partner in partner_ids:
            partner = self.migration.origin.browse('res.partner', partner)
            self.create_partner(partner, company_dest)


class MigrationTools(object):
    '''
    Conections object to get records to migrate
    '''

    def __init__(self):
        '''
        Objects of origin and destiny
        '''
        self.origin = False
        self.dest = False
        self.loger = False

    def main(self, configuration):
        '''
        Get variables of the configuration object
        '''
        hostname = configuration.get_hostname()
        dbname = configuration.get_db()
        port = configuration.get_port()
        user = configuration.get_user()
        pwd = configuration.get_pwd()
        shost = configuration.get_shostname()
        sdb = configuration.get_sdb()
        sport = configuration.get_sport()
        suser = configuration.get_suser()
        spwd = configuration.get_spwd()
        test = True
        try:
            test = test_server(hostname, port)
        except:
            test = False
            configuration.logger.error(
                "We can't connect to the server: http://%s:%s" %
                (hostname, port))

        if not test:
            configuration.logger.error(
                "Please review again the sent parameters")

        origin = Instance(dbname=dbname, hostname=hostname, port=int(port),
                          passwd=pwd, username=user,
                          logger=configuration.logger)
        self.origin = origin.server_login()
        dest = Instance(dbname=sdb, hostname=shost, port=int(sport),
                        passwd=spwd, username=suser,
                        logger=configuration.logger)
        self.dest = dest.server_login()
        self.loger = configuration.logger
        return True


def test_server(host, port):
    '''
    Test the conection with the servers
    '''
    oerp = oerplib.OERP(host, port=port)
    # TODO: Log correctly the failure, now the algorithm to parse the logfile
    # need to be done separately due to the fail moment
    return oerp

if __name__ == '__main__':

    CONFIGURATION = VauxooToolsServers(app_name='migrate_instances',
                                       usage_message="Created by VauxooTools",
                                       options=['dbname', 'hostname',
                                                'password', 'port', 'sd',
                                                'sh', 'spo', 'sp', 'su',
                                                'username'],
                                       log=True, vx_instance=VxConfigServers)

    CI = MigrationTools()
    CI.main(CONFIGURATION)
    ACCOUNT = ImportAccountsV6(CI)
    ACCOUNT.main()
    PARTNER = ImportPartnerV6(CI)
    PARTNER.main()
